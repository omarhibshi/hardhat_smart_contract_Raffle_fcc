{
  "address": "0xD9ac9c936F73dA304EbfD0e6d12D35E8df8DaFcB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNUmWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6735e709c7dd6834934370a1b975e08adf6cfd7f888395196ae94db442486f00",
  "receipt": {
    "to": null,
    "from": "0xAbB0f4626b06EAEAD0F305104edF79066a6A01B4",
    "contractAddress": "0xD9ac9c936F73dA304EbfD0e6d12D35E8df8DaFcB",
    "transactionIndex": 10,
    "gasUsed": "1297476",
    "logsBloom": "0x
    "blockHash": "0x19993f0595df3e0e53abf978116043aa964f89af7b41f1de6026e18534f39120",
    "transactionHash": "0x6735e709c7dd6834934370a1b975e08adf6cfd7f888395196ae94db442486f00",
    "logs": [],
    "blockNumber": 3594657,
    "cumulativeGasUsed": "3384800",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "2426",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 10,
  "solcInputHash": "1d9b7a8c72dfdbd17c7f29304e9bcce7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNUmWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Omar ALHABSHI  (Patrick)\",\"details\":\"This implements the Chainlink VRF Version 2\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function the chainlink keeper nodes call They look for the `upkeepNeeded` to return true The following should be true in order to return true 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lotteru should e in an \\\"open\\\" state. \"},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` has returned `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"performUpkeep function is callefd automatically by the chainLink node\"}},\"notice\":\"This contract is for creating a sample decentrlized fully automated raffle system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface AutomationCompatibleInterface {\\n    /**\\n     * @notice method that is simulated by the keepers to see if any work actually\\n     * needs to be performed. This method does does not actually need to be\\n     * executable, and since it is only ever simulated it can consume lots of gas.\\n     * @dev To ensure that it is never called, you may want to add the\\n     * cannotExecute modifier from KeeperBase to your implementation of this\\n     * method.\\n     * @param checkData specified in the upkeep registration so it is always the\\n     * same for a registered upkeep. This can easily be broken down into specific\\n     * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n     * same contract and easily differentiated by the contract.\\n     * @return upkeepNeeded boolean to indicate whether the keeper should call\\n     * performUpkeep or not.\\n     * @return performData bytes that the keeper should call performUpkeep with, if\\n     * upkeep is needed. If you would like to encode data to decode later, try\\n     * `abi.encode`.\\n     */\\n    function checkUpkeep(\\n        bytes calldata checkData\\n    ) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n    /**\\n     * @notice method that is actually executed by the keepers, via the registry.\\n     * The data returned by the checkUpkeep simulation will be passed into\\n     * this method to actually be executed.\\n     * @dev The input to this method should not be trusted, and the caller of the\\n     * method should not even be restricted to any single registry. Anyone should\\n     * be able call it, and the input should be validated, there is no guarantee\\n     * that the data passed in is the performData returned from checkUpkeep. This\\n     * could happen due to malicious keepers, racing keepers, or simply a state\\n     * change while the performUpkeep transaction is waiting for confirmation.\\n     * Always validate the data passed in.\\n     * @param performData is the data which was passed back from the checkData\\n     * simulation. If it is encoded, it can easily be decoded into other types by\\n     * calling `abi.decode`. This data should not be trusted, and should be\\n     * validated against the contract's current state.\\n     */\\n    function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x984ccb062f5e40c76a7c3a984f4d7413e4ffd8aeb57535039aecff163cd9303e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n// Contract outline:\\n// Enter the lottery (paying some amount)\\n// Pick a random winner (verifiable random)\\n// Winner to be selected every X minutes -> completly automate\\n// Chainlink Oracle -> Randomness, Automated Excution (Chainlink keeper)\\n\\n/* Errors */\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 balance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\n\\n/**@title A sample Raffle Contract\\n * @author Omar ALHABSHI  (Patrick)\\n * @notice This contract is for creating a sample decentrlized fully automated raffle system\\n * @dev This implements the Chainlink VRF Version 2\\n */\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type declaration */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    /* State variables */\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    /* Lottary variable */\\n    address payable[] private s_players;\\n    uint256 private immutable i_entranceFee;\\n    address private s_recentWinner;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n    RaffleState private s_raffleState;\\n\\n    /* Events */\\n    event RaffleEntered(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_interval = interval;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        //Emit an event when we update a dynamc array or mapping\\n        emit RaffleEntered(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function the chainlink keeper nodes call\\n     * They look for the `upkeepNeeded` to return true\\n     * The following should be true in order to return true\\n     * 1. Our time interval should have passed\\n     * 2. The lottery should have at least 1 player, and have some ETH\\n     * 3. Our subscription is funded with LINK\\n     * 4. The lotteru should e in an \\\"open\\\" state.\\n     * */\\n    function checkUpkeep(\\n        bytes memory /*checkData */\\n    )\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\\n    {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && hasPlayers && timePassed && hasBalance);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` has returned `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     * @notice performUpkeep function is callefd automatically by the chainLink node\\n     */\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        //\\n        if (!upkeepNeeded) {\\n            // or upkeepNeeded == false\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // Sometimes caled keyHash\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    /**\\n     * @notice fulfillRandomWords function is callefd automatically by the chainLink node\\n     */\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNUmWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmation() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getSubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n}\\n\",\"keccak256\":\"0xb0f0e52ac9ef751a7616a9d16cc86025bf1f28d3d24dd06562c22b220fc607e5\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620019ce380380620019ce833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508261014081815250508467ffffffffffffffff1660e08167ffffffffffffffff16815250508161012081815250506000600360006101000a81548160ff0219169083600181111562000101576200010062000330565b5b0217905550426002819055508063ffffffff166101008163ffffffff16815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b600067ffffffffffffffff82169050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b6000819050919050565b620001f281620001dd565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001c6565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200023c565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516115ea620003e46000396000818161088d01526109360152600081816103ac01526104b801526000818161076701526109bb0152600081816107440152610993015260008181610723015261095e015260006106e70152600081816103e9015261043d01526115ea6000f3fe6080604052600436106100f35760003560e01c80636e04ff0d1161008a578063de3d9fb711610059578063de3d9fb7146102ea578063de8be8e714610315578063e55ae4e814610340578063fd6673f51461037d576100f3565b80636e04ff0d1461022b57806391ad27b414610269578063c19dd76b14610294578063ca6a9ef8146102bf576100f3565b80632cfcc539116100c65780632cfcc539146101a2578063320229eb146101ac5780634585e33b146101d7578063473f1ddc14610200576100f3565b806309bc33a7146100f8578063115cbaf5146101235780631fe543e31461014e5780632553af3914610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610d23565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610db5565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f69565b6103e7565b005b34801561018357600080fd5b5061018c6104a7565b6040516101999190610d23565b60405180910390f35b6101aa6104b6565b005b3480156101b857600080fd5b506101c1610625565b6040516101ce9190610d23565b60405180910390f35b3480156101e357600080fd5b506101fe60048036038101906101f99190611020565b61062f565b005b34801561020c57600080fd5b50610215610820565b60405161022291906110ae565b60405180910390f35b34801561023757600080fd5b50610252600480360381019061024d919061117e565b61084a565b604051610260929190611261565b60405180910390f35b34801561027557600080fd5b5061027e610932565b60405161028b9190610d23565b60405180910390f35b3480156102a057600080fd5b506102a961095a565b6040516102b691906112aa565b60405180910390f35b3480156102cb57600080fd5b506102d4610982565b6040516102e19190610d23565b60405180910390f35b3480156102f657600080fd5b506102ff61098f565b60405161030c91906112e8565b60405180910390f35b34801561032157600080fd5b5061032a6109b7565b6040516103379190611322565b60405180910390f35b34801561034c57600080fd5b506103676004803603810190610362919061133d565b6109df565b60405161037491906110ae565b60405180910390f35b34801561038957600080fd5b50610392610a26565b60405161039f9190610d23565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161049092919061136a565b60405180910390fd5b6104a38282610a32565b5050565b6000600163ffffffff16905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610510576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561052457610523610d3e565b5b600360009054906101000a900460ff16600181111561054657610545610d3e565b5b1461057d576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b6000600254905090565b60006106496040518060200160405280600081525061084a565b509050806106b85747600080549050600360009054906101000a900460ff16600181111561067a57610679610d3e565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106af93929190611393565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156106de576106dd610d3e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107a89594939291906113e7565b6020604051808303816000875af11580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb919061144f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060606000600360009054906101000a900460ff16600181111561087257610871610d3e565b5b6000600181111561088657610885610d3e565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108ba91906114ab565b119050600080600080549050119050600080471190508380156108da5750815b80156108e35750825b80156108ec5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109f4576109f36114df565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610a4d57610a4c6114df565b5b6020026020010151610a5f919061153d565b90506000808281548110610a7657610a756114df565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff02191690836001811115610b0a57610b09610d3e565b5b0217905550600067ffffffffffffffff811115610b2a57610b29610e26565b5b604051908082528060200260200182016040528015610b585781602001602082028036833780820191505090505b5060009080519060200190610b6e929190610c63565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b9c9061159f565b60006040518083038185875af1925050503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5050905080610c19576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cdc579160200282015b82811115610cdb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c83565b5b509050610ce99190610ced565b5090565b5b80821115610d06576000816000905550600101610cee565b5090565b6000819050919050565b610d1d81610d0a565b82525050565b6000602082019050610d386000830184610d14565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d7e57610d7d610d3e565b5b50565b6000819050610d8f82610d6d565b919050565b6000610d9f82610d81565b9050919050565b610daf81610d94565b82525050565b6000602082019050610dca6000830184610da6565b92915050565b6000604051905090565b600080fd5b600080fd5b610ded81610d0a565b8114610df857600080fd5b50565b600081359050610e0a81610de4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e5e82610e15565b810181811067ffffffffffffffff82111715610e7d57610e7c610e26565b5b80604052505050565b6000610e90610dd0565b9050610e9c8282610e55565b919050565b600067ffffffffffffffff821115610ebc57610ebb610e26565b5b602082029050602081019050919050565b600080fd5b6000610ee5610ee084610ea1565b610e86565b90508083825260208201905060208402830185811115610f0857610f07610ecd565b5b835b81811015610f315780610f1d8882610dfb565b845260208401935050602081019050610f0a565b5050509392505050565b600082601f830112610f5057610f4f610e10565b5b8135610f60848260208601610ed2565b91505092915050565b60008060408385031215610f8057610f7f610dda565b5b6000610f8e85828601610dfb565b925050602083013567ffffffffffffffff811115610faf57610fae610ddf565b5b610fbb85828601610f3b565b9150509250929050565b600080fd5b60008083601f840112610fe057610fdf610e10565b5b8235905067ffffffffffffffff811115610ffd57610ffc610fc5565b5b60208301915083600182028301111561101957611018610ecd565b5b9250929050565b6000806020838503121561103757611036610dda565b5b600083013567ffffffffffffffff81111561105557611054610ddf565b5b61106185828601610fca565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110988261106d565b9050919050565b6110a88161108d565b82525050565b60006020820190506110c3600083018461109f565b92915050565b600080fd5b600067ffffffffffffffff8211156110e9576110e8610e26565b5b6110f282610e15565b9050602081019050919050565b82818337600083830152505050565b600061112161111c846110ce565b610e86565b90508281526020810184848401111561113d5761113c6110c9565b5b6111488482856110ff565b509392505050565b600082601f83011261116557611164610e10565b5b813561117584826020860161110e565b91505092915050565b60006020828403121561119457611193610dda565b5b600082013567ffffffffffffffff8111156111b2576111b1610ddf565b5b6111be84828501611150565b91505092915050565b60008115159050919050565b6111dc816111c7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561121c578082015181840152602081019050611201565b60008484015250505050565b6000611233826111e2565b61123d81856111ed565b935061124d8185602086016111fe565b61125681610e15565b840191505092915050565b600060408201905061127660008301856111d3565b81810360208301526112888184611228565b90509392505050565b6000819050919050565b6112a481611291565b82525050565b60006020820190506112bf600083018461129b565b92915050565b600067ffffffffffffffff82169050919050565b6112e2816112c5565b82525050565b60006020820190506112fd60008301846112d9565b92915050565b600063ffffffff82169050919050565b61131c81611303565b82525050565b60006020820190506113376000830184611313565b92915050565b60006020828403121561135357611352610dda565b5b600061136184828501610dfb565b91505092915050565b600060408201905061137f600083018561109f565b61138c602083018461109f565b9392505050565b60006060820190506113a86000830186610d14565b6113b56020830185610d14565b6113c26040830184610d14565b949350505050565b600061ffff82169050919050565b6113e1816113ca565b82525050565b600060a0820190506113fc600083018861129b565b61140960208301876112d9565b61141660408301866113d8565b6114236060830185611313565b6114306080830184611313565b9695505050505050565b60008151905061144981610de4565b92915050565b60006020828403121561146557611464610dda565b5b60006114738482850161143a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114b682610d0a565b91506114c183610d0a565b92508282039050818111156114d9576114d861147c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061154882610d0a565b915061155383610d0a565b9250826115635761156261150e565b5b828206905092915050565b600081905092915050565b50565b600061158960008361156e565b915061159482611579565b600082019050919050565b60006115aa8261157c565b915081905091905056fea2646970667358221220792256ae4909de20e5cf702fcc9010ec591b222ec658f73e9ab513ac97f8813f64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80636e04ff0d1161008a578063de3d9fb711610059578063de3d9fb7146102ea578063de8be8e714610315578063e55ae4e814610340578063fd6673f51461037d576100f3565b80636e04ff0d1461022b57806391ad27b414610269578063c19dd76b14610294578063ca6a9ef8146102bf576100f3565b80632cfcc539116100c65780632cfcc539146101a2578063320229eb146101ac5780634585e33b146101d7578063473f1ddc14610200576100f3565b806309bc33a7146100f8578063115cbaf5146101235780631fe543e31461014e5780632553af3914610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610d23565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610db5565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f69565b6103e7565b005b34801561018357600080fd5b5061018c6104a7565b6040516101999190610d23565b60405180910390f35b6101aa6104b6565b005b3480156101b857600080fd5b506101c1610625565b6040516101ce9190610d23565b60405180910390f35b3480156101e357600080fd5b506101fe60048036038101906101f99190611020565b61062f565b005b34801561020c57600080fd5b50610215610820565b60405161022291906110ae565b60405180910390f35b34801561023757600080fd5b50610252600480360381019061024d919061117e565b61084a565b604051610260929190611261565b60405180910390f35b34801561027557600080fd5b5061027e610932565b60405161028b9190610d23565b60405180910390f35b3480156102a057600080fd5b506102a961095a565b6040516102b691906112aa565b60405180910390f35b3480156102cb57600080fd5b506102d4610982565b6040516102e19190610d23565b60405180910390f35b3480156102f657600080fd5b506102ff61098f565b60405161030c91906112e8565b60405180910390f35b34801561032157600080fd5b5061032a6109b7565b6040516103379190611322565b60405180910390f35b34801561034c57600080fd5b506103676004803603810190610362919061133d565b6109df565b60405161037491906110ae565b60405180910390f35b34801561038957600080fd5b50610392610a26565b60405161039f9190610d23565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161049092919061136a565b60405180910390fd5b6104a38282610a32565b5050565b6000600163ffffffff16905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610510576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561052457610523610d3e565b5b600360009054906101000a900460ff16600181111561054657610545610d3e565b5b1461057d576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b6000600254905090565b60006106496040518060200160405280600081525061084a565b509050806106b85747600080549050600360009054906101000a900460ff16600181111561067a57610679610d3e565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106af93929190611393565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156106de576106dd610d3e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107a89594939291906113e7565b6020604051808303816000875af11580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb919061144f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060606000600360009054906101000a900460ff16600181111561087257610871610d3e565b5b6000600181111561088657610885610d3e565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108ba91906114ab565b119050600080600080549050119050600080471190508380156108da5750815b80156108e35750825b80156108ec5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109f4576109f36114df565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610a4d57610a4c6114df565b5b6020026020010151610a5f919061153d565b90506000808281548110610a7657610a756114df565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff02191690836001811115610b0a57610b09610d3e565b5b0217905550600067ffffffffffffffff811115610b2a57610b29610e26565b5b604051908082528060200260200182016040528015610b585781602001602082028036833780820191505090505b5060009080519060200190610b6e929190610c63565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b9c9061159f565b60006040518083038185875af1925050503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5050905080610c19576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cdc579160200282015b82811115610cdb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c83565b5b509050610ce99190610ced565b5090565b5b80821115610d06576000816000905550600101610cee565b5090565b6000819050919050565b610d1d81610d0a565b82525050565b6000602082019050610d386000830184610d14565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d7e57610d7d610d3e565b5b50565b6000819050610d8f82610d6d565b919050565b6000610d9f82610d81565b9050919050565b610daf81610d94565b82525050565b6000602082019050610dca6000830184610da6565b92915050565b6000604051905090565b600080fd5b600080fd5b610ded81610d0a565b8114610df857600080fd5b50565b600081359050610e0a81610de4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e5e82610e15565b810181811067ffffffffffffffff82111715610e7d57610e7c610e26565b5b80604052505050565b6000610e90610dd0565b9050610e9c8282610e55565b919050565b600067ffffffffffffffff821115610ebc57610ebb610e26565b5b602082029050602081019050919050565b600080fd5b6000610ee5610ee084610ea1565b610e86565b90508083825260208201905060208402830185811115610f0857610f07610ecd565b5b835b81811015610f315780610f1d8882610dfb565b845260208401935050602081019050610f0a565b5050509392505050565b600082601f830112610f5057610f4f610e10565b5b8135610f60848260208601610ed2565b91505092915050565b60008060408385031215610f8057610f7f610dda565b5b6000610f8e85828601610dfb565b925050602083013567ffffffffffffffff811115610faf57610fae610ddf565b5b610fbb85828601610f3b565b9150509250929050565b600080fd5b60008083601f840112610fe057610fdf610e10565b5b8235905067ffffffffffffffff811115610ffd57610ffc610fc5565b5b60208301915083600182028301111561101957611018610ecd565b5b9250929050565b6000806020838503121561103757611036610dda565b5b600083013567ffffffffffffffff81111561105557611054610ddf565b5b61106185828601610fca565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110988261106d565b9050919050565b6110a88161108d565b82525050565b60006020820190506110c3600083018461109f565b92915050565b600080fd5b600067ffffffffffffffff8211156110e9576110e8610e26565b5b6110f282610e15565b9050602081019050919050565b82818337600083830152505050565b600061112161111c846110ce565b610e86565b90508281526020810184848401111561113d5761113c6110c9565b5b6111488482856110ff565b509392505050565b600082601f83011261116557611164610e10565b5b813561117584826020860161110e565b91505092915050565b60006020828403121561119457611193610dda565b5b600082013567ffffffffffffffff8111156111b2576111b1610ddf565b5b6111be84828501611150565b91505092915050565b60008115159050919050565b6111dc816111c7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561121c578082015181840152602081019050611201565b60008484015250505050565b6000611233826111e2565b61123d81856111ed565b935061124d8185602086016111fe565b61125681610e15565b840191505092915050565b600060408201905061127660008301856111d3565b81810360208301526112888184611228565b90509392505050565b6000819050919050565b6112a481611291565b82525050565b60006020820190506112bf600083018461129b565b92915050565b600067ffffffffffffffff82169050919050565b6112e2816112c5565b82525050565b60006020820190506112fd60008301846112d9565b92915050565b600063ffffffff82169050919050565b61131c81611303565b82525050565b60006020820190506113376000830184611313565b92915050565b60006020828403121561135357611352610dda565b5b600061136184828501610dfb565b91505092915050565b600060408201905061137f600083018561109f565b61138c602083018461109f565b9392505050565b60006060820190506113a86000830186610d14565b6113b56020830185610d14565b6113c26040830184610d14565b949350505050565b600061ffff82169050919050565b6113e1816113ca565b82525050565b600060a0820190506113fc600083018861129b565b61140960208301876112d9565b61141660408301866113d8565b6114236060830185611313565b6114306080830184611313565b9695505050505050565b60008151905061144981610de4565b92915050565b60006020828403121561146557611464610dda565b5b60006114738482850161143a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114b682610d0a565b91506114c183610d0a565b92508282039050818111156114d9576114d861147c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061154882610d0a565b915061155383610d0a565b9250826115635761156261150e565b5b828206905092915050565b600081905092915050565b50565b600061158960008361156e565b915061159482611579565b600082019050919050565b60006115aa8261157c565b915081905091905056fea2646970667358221220792256ae4909de20e5cf702fcc9010ec591b222ec658f73e9ab513ac97f8813f64736f6c63430008120033",
  "devdoc": {
    "author": "Omar ALHABSHI  (Patrick)",
    "details": "This implements the Chainlink VRF Version 2",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function the chainlink keeper nodes call They look for the `upkeepNeeded` to return true The following should be true in order to return true 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lotteru should e in an \"open\" state. "
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` has returned `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "performUpkeep function is callefd automatically by the chainLink node"
      }
    },
    "notice": "This contract is for creating a sample decentrlized fully automated raffle system",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1175,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1179,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1181,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1186,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(RaffleState)1157"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1157": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}